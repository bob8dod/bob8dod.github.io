I"@u<h2 id="jpa는-왜-필요한가">JPA는 왜 필요한가?</h2>

<h3 id="객체지향언어와-sql관계형-db">객체지향언어와 SQL(관계형 DB)</h3>

<ul>
  <li>관계
    <ul>
      <li>현재 시대는 <strong>객체를 관계형DB에 관리</strong>하는 시대</li>
      <li>객체지향언어과 SQL을 동시에 사용</li>
    </ul>
  </li>
  <li>문제점
    <ul>
      <li>객체지향언어를 사용하면서 코드 자체는 객체지향적으로 사용하지 않고 <strong>SQL에 집중하여 SQL 중심적으로 코드</strong>를 짬!</li>
    </ul>
  </li>
</ul>

<h3 id="sql-중심적인-개발의-문제점">SQL 중심적인 개발의 문제점</h3>

<ul>
  <li>문제점
    <ul>
      <li>SQL을 통해 CRUD 를 하기 위해 <strong>직접 해당 query를 작성</strong></li>
      <li>또한, 자바 객체를 SQL로.. SQL을 자바 객체로.. <strong>변환</strong>하며 복잡하고 번잡한 코드를 작성</li>
      <li>ex) 객체 필드 추가에 따른 CRUD 변경 (매핑을 위한 작업을 일일히 수정해주어야 함!)</li>
      <li>그렇다고 SQL에 의존적인 개발을 피하기는 사실상 불가능</li>
    </ul>
  </li>
  <li><strong>패러다임의 불일치</strong>
    <ul>
      <li>객체지향의 사상 vs 관계형 DB의 사상</li>
      <li>관계형 DB의 사상 : 데이터를 <strong>잘 보관</strong>하여 <strong>정규화</strong>하는 것이 목표</li>
      <li>객체 지향의 사상 : 속성과 method를 잘 묶어 <strong>캡슐화</strong>하는 것이 목표</li>
      <li>즉, 둘의 패러다임(사상)이 달라서 여러가지 문제점이 발생</li>
      <li>결국 이 패러다임의 불일치를 해결하기 위해 객체 ↔ SQL <strong>매핑 작업이 필수적</strong>이며 이는 개발자가 진행함에 있어서 주 비지니스를 맡기 보다는 SQL 매퍼가 되어가는 상황을 직면 (해결이 시급했음!)</li>
      <li>객체와 관계형 DB의 차이
        <ul>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>**상속 [객체 O</td>
                  <td>RDB X]**</td>
                </tr>
              </tbody>
            </table>
            <ul>
              <li><strong>RDB</strong>에서 객체의 상속 관계와 가장 유사한 것이 ‘<strong>슈퍼타입 서브타입 관계(DTYPE)</strong>’</li>
              <li>하지만 이를 객체와 매핑하려면 저장, 조회 등에서 굉장히 복잡하며 비효율적인 과정을 거쳐야 함</li>
              <li>그렇다면 DB가 아닌 <strong>Java Collection</strong>에 저장한다 생각하면? → 저장, 조회가 굉장히 쉬워짐. 또한 다형성 활용도 가능!</li>
            </ul>
          </li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>**연관관계 (객체 : 참조</td>
                  <td>RDB: PK, FK, Join)**</td>
                </tr>
              </tbody>
            </table>
            <ul>
              <li>❗ <strong>객체</strong>는 추가설정이 없는 한 <strong>단방향</strong>으로 밖에 이동 불가능, <strong>RDB</strong>는 추가설정 없이 <strong>양방향</strong> 이동 가능</li>
              <li>패러다임의 차이를 해결하기 위해 만약 <strong>객체를 테이블에 맞추어 모델링</strong>한다면? → 말 그대로 <strong>객체 지향적인 코드가 아님!</strong></li>
              <li>SQL의 <strong>JOIN</strong> 을 통해서 객체를 가져올 경우 <strong>객체 그래프 탐색이 불가능</strong> → 처음 query를 통해 불러온 <strong>범위에 의해서 한정</strong>됨. → 그에 따른 <strong>엔티티 신뢰 문제</strong>(객체의 연관관계를 신뢰하며 그냥 부를 수 없게 되는 것! query에서 불러오지 않았을 수도 있으므로) 발생!! (물리적으론 가능하지만, 논리적으로는 불가능한 경우)</li>
              <li>그렇다고 모든 객체를 미리 로딩할 수는 없음</li>
              <li>만약 DB가 아닌 <strong>Java Collection</strong>에 저장한다 생각하면? → 참조값이 함께 들어가기 때문에 저장 및 조회가 간단해지고 객체 그래프 탐색 가능!</li>
            </ul>
          </li>
          <li><strong>데이터 타입, 데이터 식별 방법 등</strong></li>
        </ul>
      </li>
      <li>즉, RDB에 객체를 저장하며 객체답게 모델링 할수록 매핑 작업만 늘어나며 비효율적인 상황이 발생하게 됨!</li>
      <li>그렇다면 지속적으로 봐왔던 것처럼 <strong>객체를 Java Collection에 저장하듯이 DB에 저장</strong>할 수는 없을까?? → <strong>JPA(Java Persistence API)</strong> 개념 도입</li>
    </ul>
  </li>
</ul>

<h2 id="jpajava-persistence-api">JPA(Java Persistence API)</h2>

<h3 id="jpa">JPA</h3>

<ul>
  <li><strong>Java Persistence API</strong></li>
  <li>인터페이스의 모음 (즉, <strong>구현체를 요구</strong>함 → 구현체는 대표적으로 <strong>Hibernate</strong> 를 사용)</li>
  <li>“<strong>DB 이용을 마치 Java Collection에 객체를 담는 식으로 이용한다</strong>”는 사상</li>
  <li>자바 진영의 <strong>ORM</strong> 기술 표준 ⇒ <strong>ORM</strong>(Object-relational mapping = 객체 관계 매핑) : 객체는 객체대로 설계하고 관계형 DB는 관계형 DB대로 설계한 후 <strong>해당 프레임워크가 중간에 알아서 매핑해준다</strong>는 의미</li>
  <li>
    <p>JPA는 Application과  JDBC 사이에서 동작!</p>

    <p><img src="JPA%20%E1%84%89%E1%85%A9%E1%84%80%E1%85%A2%20%E1%84%86%E1%85%B5%E1%86%BE%20%E1%84%80%E1%85%A1%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8%20480fac5964f54aff9de9fb1243118a3f/Untitled.png" alt="Untitled" /></p>

    <ul>
      <li>개발자가 직접 JDBC를 사용하는 것이 아니라</li>
      <li>개발자가 JPA에게 명령을 내리면 JPA가 JDBC API를 사용하여 DB에 접근하는 것</li>
    </ul>
  </li>
  <li>JPA 동작
    <ul>
      <li>
        <p>저장</p>

        <p><img src="JPA%20%E1%84%89%E1%85%A9%E1%84%80%E1%85%A2%20%E1%84%86%E1%85%B5%E1%86%BE%20%E1%84%80%E1%85%A1%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8%20480fac5964f54aff9de9fb1243118a3f/Untitled%201.png" alt="Untitled" /></p>

        <ul>
          <li>JPA에게 Entity 객체와 명령어를 같이 보내주면</li>
          <li>JPA는 <strong>Entity를 분석</strong>하여 그에 맞는 INSERT <strong>query를 생성</strong>하여 <strong>JDBC API를 이용하여 DB를 사용</strong>하게 됨</li>
          <li>JPA가 <strong>자동으로 직접 query를 생성</strong>해준다는 부분이 중요!</li>
          <li>패러다임 불일치 해결!</li>
        </ul>
      </li>
      <li>
        <p>조회</p>

        <p><img src="JPA%20%E1%84%89%E1%85%A9%E1%84%80%E1%85%A2%20%E1%84%86%E1%85%B5%E1%86%BE%20%E1%84%80%E1%85%A1%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8%20480fac5964f54aff9de9fb1243118a3f/Untitled%202.png" alt="Untitled" /></p>

        <ul>
          <li>JPA에게 해당 Entity 객체를 찾으라 명령하면</li>
          <li>JPA는 <strong>Entity를 분석</strong>하여 적절한 SELECT <strong>query 를 만들</strong>어 <strong>JDBC API를 이용하여 DB에 접근</strong></li>
          <li>그 후 <strong>해당 ResultSet을 객체에 자동으로 매핑</strong>해줌</li>
          <li>패러다임 불일치 해결!</li>
        </ul>
      </li>
      <li>
        <p>즉, JPA가 그 번잡했던 작업들(CRUD, 매핑, … )을 직접해준다는 것!!</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="jpa는-왜-사용해야-하는가">JPA는 왜 사용해야 하는가?</h3>

<ul>
  <li>생산성 (JPA와 CRUD)
    <ul>
      <li>저장 : <code class="language-plaintext highlighter-rouge">em.persist(member)</code></li>
      <li>조회 : <code class="language-plaintext highlighter-rouge">em.find(memberId, Member.class)</code></li>
      <li>수정 : <code class="language-plaintext highlighter-rouge">member.setName(”변경 이름”)</code> → <strong>영속성 컨텍스트 속 변경감지</strong></li>
      <li>삭제 : <code class="language-plaintext highlighter-rouge">em.remove(member)</code></li>
      <li>이와 같이 JPA가 제공하는 것을 통해 <strong>CRUD를 쉽게 이용</strong>할 수 있음</li>
    </ul>
  </li>
  <li>유지보수
    <ul>
      <li>기존 : 객체 필드 변경 시, Table에 매핑하기 위해 모든 CRUD query를 수정해야 했었음</li>
      <li>JPA 사용 : <strong>자동으로 매핑</strong>되기에 알아서 적용됨. 즉, CRUD query는 JPA가 처리해줌</li>
    </ul>
  </li>
  <li>JPA와 패러다임의 불일치 해결
    <ul>
      <li>상속 관계
        <ul>
          <li>JPA를 통해 상속 관계에 있는 객체를 저장 및 조회해주면 해당 관계의 모든 객체를 알아서 저장 및 조회해줌 → 즉, <strong>DB 중심적인 개발에서 벗어날 수 있음</strong></li>
        </ul>
      </li>
      <li>연관 관계
        <ul>
          <li>저장 : 연관관계에 있는 객체 하나를 저장하면 해당 객체와 <strong>연관된 객체를 알아서 저장</strong>해줌 (cascade)</li>
          <li>조회 : 한 객체를 조회하면, 그와 연관관계가 있는 객체를 알아서 끌어와줌 (fetch) → 객<strong>체 그래프 탐색 가능</strong></li>
          <li>마치 <strong>Java Collection 에서 객체를 다루듯이 DB를 이용</strong>할 수 있어짐</li>
        </ul>
      </li>
      <li>신뢰할 수 있는 Entity, 계층
        <ul>
          <li>JPA의 “지연 로딩, 즉시 로딩”에 의해 가능한 부분</li>
          <li>JPA를 통해서 <strong>연관관계 저장 및 접근이 확실히 이루어진다</strong>는 것을 알 수 있음</li>
          <li>그에 따라 자유롭게 <strong>객체 그래프 탐색이 가능</strong>해짐</li>
        </ul>
      </li>
      <li>객체 비교
        <ul>
          <li>동일한 Transaction에서 조회한 Entity는 같음을 보장 (식별자 사용)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>JPA의 성능 최적화 기능
    <ul>
      <li><strong>1차 캐시</strong>와 동일성 보장
        <ul>
          <li>동일한 Transaction안에서는 같은 Entity를 반환 (즉, <strong>캐시를 사용</strong>) → 약간의 조회 성능 향상</li>
        </ul>
      </li>
      <li>Transaction을 지원하는 <strong>쓰기(INSERT) 지연</strong>
        <ul>
          <li>Transaction 커밋할 때까지 INSERT query를 모음</li>
          <li><strong>JDBC BATCH SQL 기능</strong>을 사용하여 한번에 SQL 전송 (JPA를 통해 쉽게 이용할 수 있어진 것)</li>
          <li>즉, 그 즉시 query가 나가는 것이 아닌, 일단 모은 후에 중복되는 것들에 대해선 최적화 시켜준 후 <strong>한번에 query를 보내어 성능 최적화</strong> 실시 → 네트워크 측면에서의 최적화</li>
        </ul>
      </li>
      <li><strong>즉시 로딩과 지연 로딩</strong>
        <ul>
          <li>지연 로딩 : 일단 객체를 모두 끌어와 놓는 것이 아닌, <strong>실제 필요할 때에 끌어 오는 것</strong> → <strong>Proxy</strong> 기능 사용
            <ul>
              <li>장점 : 쓸데없는 데이터를 불러오지 않아도 됨. 무한루프에 빠질 염려가 없음 (연관관계 속 무한루프)</li>
              <li>단점 : query가 많이 나감 (네트워크 측면)</li>
            </ul>
          </li>
          <li>즉시 로딩 : 불러오는 객체와 <strong>연관된 모든 객체를 미리 끌어와 놓아 사용</strong>하는 것
            <ul>
              <li>장점 : query 한방으로 해결</li>
              <li>단점 : 쓸데없는 데이터를 모두 가져오게 되어 부담이 되고, 무한 루프에 빠질 위험이 존재</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<aside>
⚠️ **JPA와 RDB를 통한 ORM 개발**
JPA만 잘 안다고 해서 ORM을 잘 사용할 수 있는 것도 아니고 RDB만 잘 안다고 해서 ORM을 잘 사용할 수 있는 것이나 아님. 즉, 무게를 동일하게 생각하고 둘다 잘 사용해야 제대로된 ORM 개발이 가능함!!

</aside>

<h2 id="jpa-프로젝트-설정">JPA 프로젝트 설정</h2>

<h3 id="프로젝트-생성">프로젝트 생성</h3>

<ul>
  <li><strong>Maven</strong>
    <ul>
      <li>Java 라이브러리, 빌드 관리</li>
      <li>라이브러리 자동 다운로드 및 의존성(Depedency) 관리</li>
      <li>요즘은 Gradle을 더 많이 사용</li>
      <li>이전 자료들은 보통 Maven을 기준으로 사용하기 때문에 알아두면 좋음</li>
    </ul>
  </li>
</ul>

<h3 id="프로젝트-설정">프로젝트 설정</h3>

<ul>
  <li><strong>라이브러리 설정 (JPA, DataBase 라이브러리)</strong>
    <ul>
      <li>
        <p>pom.xml</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
  <span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
           <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
           <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>jpa-basic<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>ex1-hello-jpa<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;dependencies&gt;</span>
          <span class="c">&lt;!-- JAVA11에서 Hibernate를 사용하기 위함 --&gt;</span>
          <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>javax.xml.bind<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>jaxb-api<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;version&gt;</span>2.3.0<span class="nt">&lt;/version&gt;</span>
          <span class="nt">&lt;/dependency&gt;</span>
          <span class="c">&lt;!-- JPA 하이버네이트 --&gt;</span>
          <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>org.hibernate<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>hibernate-entitymanager<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;version&gt;</span>5.3.10.Final<span class="nt">&lt;/version&gt;</span>
          <span class="nt">&lt;/dependency&gt;</span>
          <span class="c">&lt;!-- H2 데이터베이스 --&gt;</span>
          <span class="nt">&lt;dependency&gt;</span>
              <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
              <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
              <span class="nt">&lt;version&gt;</span>1.4.199<span class="nt">&lt;/version&gt;</span>
          <span class="nt">&lt;/dependency&gt;</span>
      <span class="nt">&lt;/dependencies&gt;</span>
      <span class="nt">&lt;properties&gt;</span>
          <span class="nt">&lt;maven.compiler.source&gt;</span>17<span class="nt">&lt;/maven.compiler.source&gt;</span>
          <span class="nt">&lt;maven.compiler.target&gt;</span>17<span class="nt">&lt;/maven.compiler.target&gt;</span>
      <span class="nt">&lt;/properties&gt;</span>
  <span class="nt">&lt;/project&gt;</span>
</code></pre></div>        </div>
      </li>
      <li>JPA Hibernate 라이브러리 다운로드 및 의존성 추가</li>
      <li>H2 DataBase 라이브러리 다운로드 및 의존성 추가</li>
      <li>Java 11 에서 Hibernate 를 이용하기 위한 라이브러리 다운로드 및 의존성 추가</li>
    </ul>
  </li>
  <li><strong>JPA 설정</strong>
    <ul>
      <li>
        <p>persistence.xml</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
  <span class="nt">&lt;persistence</span> <span class="na">version=</span><span class="s">"2.2"</span>
               <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/persistence"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
               <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;persistence-unit</span> <span class="na">name=</span><span class="s">"hello"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;properties&gt;</span>
              <span class="c">&lt;!-- 필수 속성 --&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"javax.persistence.jdbc.driver"</span> <span class="na">value=</span><span class="s">"org.h2.Driver"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"javax.persistence.jdbc.user"</span> <span class="na">value=</span><span class="s">"park"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"javax.persistence.jdbc.password"</span> <span class="na">value=</span><span class="s">""</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"javax.persistence.jdbc.url"</span> <span class="na">value=</span><span class="s">"jdbc:h2:tcp://localhost/~/jpa-basic"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.dialect"</span> <span class="na">value=</span><span class="s">"org.hibernate.dialect.H2Dialect"</span><span class="nt">/&gt;</span>
        
              <span class="c">&lt;!-- 옵션 --&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.show_sql"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.format_sql"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.use_sql_comments"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hibernate.hbm2ddl.auto"</span> <span class="na">value=</span><span class="s">"create"</span> <span class="nt">/&gt;</span>
          <span class="nt">&lt;/properties&gt;</span>
      <span class="nt">&lt;/persistence-unit&gt;</span>
  <span class="nt">&lt;/persistence&gt;</span>
</code></pre></div>        </div>

        <ul>
          <li><strong>JPA 설정 파일</strong></li>
          <li>정해진 규칙에 따라 “/META-INF/persistence.xml” 에 위치</li>
          <li>javax.persistence로 시작하는 속성: JPA 표준 속성</li>
          <li>hibernate로 시작하는 속성: 하이버네이트 전용 속성</li>
          <li>
            <p>JPA는 특정 DB에 종속하지 않기에 <strong>여러 각각의 DB의 문법,함수 차이에 영향을 받지 않음</strong> <strong>(데이터베이스 방언)</strong></p>

            <p><img src="JPA%20%E1%84%89%E1%85%A9%E1%84%80%E1%85%A2%20%E1%84%86%E1%85%B5%E1%86%BE%20%E1%84%80%E1%85%A1%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8%20480fac5964f54aff9de9fb1243118a3f/Untitled%203.png" alt="Untitled" /></p>

            <ul>
              <li>속성 파일의   <code class="language-plaintext highlighter-rouge">&lt;property name="hibernate.dialect" value="..."/&gt;</code> 부분</li>
              <li>Hibernate는 <strong>40가지 이상의 DataBase Dialect 지원</strong></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="jpa-기본-사용법">JPA 기본 사용법</h2>

<h3 id="jpa-구동-방식-이해">JPA 구동 방식 이해</h3>

<ul>
  <li>
    <p>JPA 구동 방식</p>

    <p><img src="JPA%20%E1%84%89%E1%85%A9%E1%84%80%E1%85%A2%20%E1%84%86%E1%85%B5%E1%86%BE%20%E1%84%80%E1%85%A1%E1%86%AB%E1%84%83%E1%85%A1%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8%20480fac5964f54aff9de9fb1243118a3f/Untitled%204.png" alt="Untitled" /></p>

    <ul>
      <li>먼저 persistence.xml 에 설정된 <strong>JPA 설정 정보를 이용한 Persistence</strong>를 통해 <strong>EntityMangerFactory 생성</strong> → <code class="language-plaintext highlighter-rouge">EntityManagerFactory emf = Persistence.*createEntityManagerFactory*("hello");</code>
        <ul>
          <li><strong>EntityMangerFactory</strong>
            <ul>
              <li><strong>EntityManger</strong> 를 여러 개를 <strong>관리하고 생성</strong>할 수 있는 Factory.</li>
              <li>application 에서 하나만 생성해서 사용해야 됨</li>
              <li>모든 application 의 동작이 끝나면 닫아줘야 함 → <code class="language-plaintext highlighter-rouge">emf.close();</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>그 후 EntityMangerFactory를 통해 <strong>EntityManger 생성</strong> → <code class="language-plaintext highlighter-rouge">EntityManager em = emf.createEntityManager();</code>
        <ul>
          <li><strong>EntityManger</strong>
            <ul>
              <li><strong>DB 조회, 저장 등 단일적인 DB 연결 및 사용</strong> 시 Entity Manger 를 생성하고 이를 통해 진행</li>
              <li>쉽게 생각하면 <strong>DB Connection 을 하나 받았다고 생각</strong></li>
              <li>여러개 생성 가능</li>
              <li>고객의 요청이 올 때마다 생성하고 버려지고 하는 존재 (그냥 진짜 DB Connection 과 같다 생각하면 됨)</li>
              <li>엔티티 매니저는 쓰레드간에 공유해선 안됨 (사용하고 버려야 함)</li>
              <li>한 단위의 작업이 끝나면 항상 엔티티 매니저는 닫아줘야 함 → <code class="language-plaintext highlighter-rouge">em.close();</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>실제 DB와의 작업을 위해 Trasaction 생성</strong> → <code class="language-plaintext highlighter-rouge">EntityTransaction tx = em.getTransaction();</code>
        <ul>
          <li><strong>Transaction</strong>
            <ul>
              <li>저장, 조회, 삭제, 수정 등 모든 <strong>EntityManger의 작업이 이루어지는 하나의 단위</strong></li>
              <li><strong>모든 EntityManger의 작업(데이터 변경)은 해당 Transaction 안</strong>에서 이루어져야 됨</li>
              <li>Transaction 시작 : <code class="language-plaintext highlighter-rouge">tx.begin();</code></li>
              <li>Transaction 끝 및 SQL 쿼리저장소 속 query 전송 :  <code class="language-plaintext highlighter-rouge">tx.commit();</code> → c<strong>ommit 으로 최종 query 를 날리는 것</strong></li>
              <li>[참고] Transaction 작업 취소 : <code class="language-plaintext highlighter-rouge">tx.rollback();</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="jpa-사용">JPA 사용</h3>

<ul>
  <li>객체와 테이블 생성 및 매핑
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Entity</code>
        <ul>
          <li>해당 Class 를 <strong>Entity 로 사용</strong>하겠다! 선언하는 것 → <strong>원하는 객체를 Table과 매핑</strong>시키겠다는 것</li>
          <li>즉, <strong>Entity Manger 에서 관리</strong>하겠다는 뜻</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">@Id</code>
        <ul>
          <li>해당 Field 를 <strong>PK(Primary Key) 로 설정</strong></li>
          <li><strong>필수 값</strong> → <strong>영속성 컨텍스트(1차 캐시)</strong>에서 해당 <strong>id 값을 key</strong> 로 사용하고 <strong>Entity 를 value</strong> 로 사용하여 저장하기 때문</li>
        </ul>
      </li>
      <li>ex) Member 객체 생성 및 Table과 매핑
        <ul>
          <li>
            <p>Member 객체</p>

            <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span> 
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
  	 <span class="nd">@Id</span> 
  	 <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
  	 <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  	 <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  	 <span class="c1">//Getter, Setter …</span>
  <span class="o">}</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>그에 따른 Member Table (<strong>JPA가 자동으로 생성해준 Create query</strong>)</p>

            <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">create</span> <span class="k">table</span> <span class="n">Member</span> <span class="p">(</span>
  	 <span class="n">id</span> <span class="nb">bigint</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
  	 <span class="n">name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  	 <span class="k">primary</span> <span class="k">key</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
  <span class="p">);</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>JPA를 통한 객체 Baisc CRUD</strong>
    <ul>
      <li>
        <p>객체</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"HelloA"</span><span class="o">);</span> <span class="c1">// 비영속 상태</span>
</code></pre></div>        </div>
      </li>
      <li>객체 저장 : <code class="language-plaintext highlighter-rouge">em.persist(member)</code></li>
      <li>객체 조회 : <code class="language-plaintext highlighter-rouge">Member foundMember = em.find(Member.class, member.getId());</code></li>
      <li>객체 수정 : <code class="language-plaintext highlighter-rouge">foundMember.setName("Edit Hello");</code> <strong>[변경 감지]</strong></li>
      <li>객체 삭제 : <code class="language-plaintext highlighter-rouge">em.remove(foundMember);</code></li>
      <li><strong>JPA를 통해</strong>서 ORM을 실행한다면, 이전과는 다르게 <strong>굉장히 간단하게 DB CRUD가 가능 해지며, 번잡한 매핑과정도 거치지 않아도 됨!</strong></li>
    </ul>
  </li>
</ul>

<h3 id="jpql-간단-소개">JPQL 간단 소개</h3>

<ul>
  <li><strong>SQL을 추상화</strong>한 JPQL이라는 <strong>객체 지향 쿼리 언어</strong></li>
  <li>테이블이 아닌 <strong>객체를 대상으로 검색하는 객체 지향 쿼리</strong> → SQL을 추상화해서 <strong>특정 데이터베이스 SQL에 의존X</strong></li>
  <li>SQL과 문법 유사, SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원</li>
  <li>JPA의 <strong>가장 단순한 조회방법으로는 비지니스로직을 수행할 수 없는 경우</strong> 사용 [ ex) 나이가 10세 이하인 회원 모두를 조회 ]</li>
  <li>검색을 할 때도 테이블이 아닌 <strong>Entity 객체를 대상으로 검색</strong> 가능</li>
  <li>즉, JPA의 기본 조회에서 <strong>검색 조건이 포함된 SQL을 추가</strong>한 것</li>
</ul>

<aside>
⚠️ **JPQL vs SQL**

- JPQL : 엔티티 객체를 대상으로 쿼리
- SQL : 데이터베이스 테이블을 대상으로 쿼리
</aside>
:ET