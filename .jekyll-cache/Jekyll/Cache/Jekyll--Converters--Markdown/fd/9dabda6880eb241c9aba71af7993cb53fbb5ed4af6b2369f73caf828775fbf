I"Jj<h2 id="프록시">프록시</h2>

<h3 id="프록시지연로딩는-왜-필요한가">프록시(+지연로딩)는 왜 필요한가?</h3>

<ul>
  <li>한 Entity를 조회할 때 그 <strong>연관관계에 있는 Entity도 항상 함께 조회</strong>해야 할까? ⇒ 로직에 따라 다름!
    <ul>
      <li>만약, 현 Entity와 그 연관관계에 있는 Entity도 같이 사용된다 → 함께 조회가 좋음</li>
      <li>하지만, 현 Entity만 사용한다. → 연관관계에 있는 Entity는 쓸데없으므로 조회하지 않고 현 Entity만 조회하는 것이 좋음</li>
      <li>즉, <strong>비지니스 로직에 따라 함께 조회하는 경우도 있고, 함께 조회하지 않고 단일 Entity만을 필요로 할 때</strong>가 있음</li>
      <li>그러므로 모든 상황에서 모든 연관관계의 Entity를 함께 끌고 오는 것은 낭비!</li>
      <li>이런 문제점을 JPA는 <strong>Proxy와 지연로딩으로 해결!</strong></li>
    </ul>
  </li>
</ul>

<h3 id="프록시-1">프록시</h3>

<ul>
  <li>프록시 기초 (<code class="language-plaintext highlighter-rouge">em.find(Entity)</code> vs <code class="language-plaintext highlighter-rouge">em.getReference(Entity)</code>)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">em.find(Entity)</code> : DB를 통해서 <strong>실제 Entity 객체 조회</strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">em.find(Entity)</code> 를 통해 반환된 객체는 <code class="language-plaintext highlighter-rouge">Member</code> 그 자체</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">em.getReference(Entity)</code> : DB 조회를 미루는 <strong>가짜(Proxy) Entity 객체 조회</strong>
        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">em.getReference(Entity)</code> 를 통해 반환된 객체는 Member가 아닌 <strong><code class="language-plaintext highlighter-rouge">Member$HiberanteProxy…</code> 라는 가짜 객체!!</strong></p>

            <p><img src="/images/posts/post-220818/Untitled.png" alt="Untitled" /></p>

            <p>해당 <strong>Proxy 객체</strong>는 텅텅 비어있으면서 <strong>실제 Entity를 가리키는 tratget</strong>, 실<strong>제 Entity의 속성들을 접근할 수 있는 method들</strong>로 설정되어 있음</p>
          </li>
          <li>DB에 query가 안나갔는데 객체가 조회됨 (물론 가짜 객체)</li>
          <li>
            <p>해당 가짜 Entity 객체의 <strong>속성값에 접근하게 되면 그제서야 실제Entity를 불러옴</strong> (<strong>DB에 query가 나가</strong>는 것)</p>

            <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span> <span class="c1">// 이때 query가 발생하지 않음</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span> <span class="c1">// id는 이미 파라미터로 넣었기 때문에 알고 있음 (이미 존재하는 값)</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span> <span class="c1">// 이때 조회 query가 발생! → 속성 접근 (알고있지 않은 값)</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>프록시 기본 특징</p>

    <p><img src="/images/posts/post-220818/Untitled 1.png" alt="Untitled" /></p>

    <ul>
      <li><strong>실제 클래스를 상속</strong> 받아 만들어짐 (Hibernate_JPA구현체가 내부적으로 동작)</li>
      <li>그래서 실제 클래스와 겉 모양이 같다. → Field에 접근할 수 있는 method들을 가지고 있는 것</li>
      <li>이론 상으로는 사용하는 입장에서는 진짜 객체인지 Proxy 객체인지 구분하지 않고 사용할 수 있음</li>
      <li>Proxy 객체는 <strong>실제 객체의 참조(target)를 보관</strong></li>
      <li>Proxy 객체를 접근하면 Proxy 객체는 Target에 있는 실제 객체의 메소드를 호출
        <ul>
          <li>이 때 DB에 직접 query를 날려 실제 Entity를 가져오는 것</li>
          <li>그렇다고 <strong>해당 Proxy 객체가 실제 Entity로 교체되는 것이 아님</strong></li>
          <li>그저 <strong>Traget에 실제 Entity가 채워지</strong>는 것</li>
          <li>한번 채워지면 Transaction단위가 끝날 때까지 재사용 가능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>프록시 객체의 초기화</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</code></pre></div>    </div>

    <p><img src="/images/posts/post-220818/Untitled 2.png" alt="Untitled" /></p>

    <ol>
      <li>.<strong>getName()</strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">em.getReference()</code>로 Proxy 객체를 불러온 후 Proxy 객체의 method인 <code class="language-plaintext highlighter-rouge">.getName()</code> 호출 → <strong>실제 객체 접근 시도</strong></li>
          <li>강제 <strong>초기화를 시도</strong>하는 것 (해당 방법말고 <code class="language-plaintext highlighter-rouge">Hibernate.initialize(entity)</code> 를 통해서도 강제 초기화 가능)</li>
        </ul>
      </li>
      <li><strong>초기화 요청</strong>
        <ul>
          <li>현재 Target에 값이 존재하지 않기 때문에 <strong>영속성 컨텍스트에 Target의 값(실제 Entity)을 요청</strong></li>
        </ul>
      </li>
      <li><strong>DB 조회</strong>
        <ul>
          <li>그에 때라 영속성 컨텍스트는 <strong>실제 Entity를 찾아오기 위해 DB를 조회</strong></li>
          <li>이때 <strong>조회 query</strong>가 나가는 것</li>
        </ul>
      </li>
      <li><strong>실제 Entity 생성</strong>
        <ul>
          <li>DB에서 조회한 결과로 <strong>실제 Entity를 생성하여 Target의 값을 마련</strong>하고 <strong>Proxy 객체의 Target에 해당 실제 Entity를 연결</strong> 해줌</li>
        </ul>
      </li>
      <li><strong>target.getName()</strong>
        <ul>
          <li>결론적으로 <strong>traget(실제 Entity)의 getName() 을 통해 값을 반환</strong>
        - <strong>[참고]</strong> 한번 초기화가 되면 Target에 값이 연결되기 때문에 다시 DB를 조회할 일은 없음 → <strong>초기화 후 재사용 가능</strong></li>
        </ul>
      </li>
    </ol>
  </li>
  <li>프록시 주요 특징
    <ul>
      <li>Proxy  객체는 처음 사용할 때 <strong>한 번만 초기화</strong></li>
      <li>
        <p>Proxy 객체를 <strong>초기화</strong> 할 때, <strong>Proxy 객체가 실제 Entity로 바뀌는 것은 아님</strong> → 초기화 되면 Proxy 객체를 통해서 <strong>실제 Entity에 접근하는 것</strong> (Proxy 객체의 Target을 통해 연결된 Entity에 접근)</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="c1">// MemberHibernateProxy...</span>
  <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span> <span class="c1">// 실제 Entity 조회 (Target 연결)</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="c1">// Member? X -&gt; MemberHibernateProxy...</span>
</code></pre></div>        </div>
      </li>
      <li>그에 따라 <strong>Type 체크 시 주의</strong>해야됨
        <ul>
          <li>Proxy 객체는 원본 Entity를 <strong>상속</strong>받으며 Proxy 객체는 <strong>원본 Entity로 교체되지 않음</strong></li>
          <li>⇒ ‘<code class="language-plaintext highlighter-rouge">==</code>’ 비교 X, ‘<code class="language-plaintext highlighter-rouge">instance of</code>’ <strong>O</strong></li>
          <li>해당 문제로 실수할 일이 없다고 생각할 수도 있지만, 직접 개발에 들어가면 예상치 못한 Proxy 객체로 <code class="language-plaintext highlighter-rouge">==</code> 비교에서 오류를 얻을 수 있음! → <code class="language-plaintext highlighter-rouge">instance of</code> 사용 필수!</li>
          <li>이런 특징 상 Proxy든 아니든 개발에 문제가 없도록 진행해야 됨</li>
        </ul>
      </li>
      <li>영속성 컨텍스트에 찾는 엔티티가 이미 있으면 <code class="language-plaintext highlighter-rouge">em.getReference()</code> 를 호출해도 실제 Entity 반환
        <ul>
          <li><strong>영속성 컨텍스트에 Entity가 존재하면, 사실 Proxy를 쓸 이유가 없어짐!</strong> (Proxy 객체의 target에 연결할 필요가 없음! → 이미 있었으니깐)</li>
          <li>그래서 그냥 해당 Proxy 객체를 <strong>존재하고 있었던 Entity로 변환</strong>하는 것!</li>
        </ul>
      </li>
      <li>Proxy객체가 영속성 컨텍스트의 도움을 받을 수 없는 <strong>준영속 상태</strong>일 때, <strong>프록시를 초기화하면 예외 발생</strong> → <code class="language-plaintext highlighter-rouge">org.hibernate.LazyInitializationException</code>
        <ul>
          <li>Proxy 객체를 detach를 통해 준영속 상태로 만든 경우,</li>
          <li>EntityManger를 끈 경우,</li>
          <li>Transaction 단위에서 실행되지 않을 경우 등</li>
          <li><strong>Proxy 객체가 초기화 시(실제 Entity를 가져올 때) 사용하는 것이 영속성 컨텍스트이므로 당연히 오류 발생!</strong></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="즉시-로딩과-지연-로딩">즉시 로딩과 지연 로딩</h2>

<h3 id="즉시-로딩과-지연-로딩-설정은-왜-있는가">즉시 로딩과 지연 로딩 설정은 왜 있는가?</h3>

<ul>
  <li><strong>Proxy 의 필요성</strong>과 연관되어 있음</li>
  <li>즉, <strong>비지니스 로직에 따라 함께 조회하는 경우도 있고, 함께 조회하지 않고 단일 Entity만을 필요로 할 때</strong>가 있음</li>
  <li>이때의 사용되는 설정이 <strong>즉시로딩과 지연로딩</strong></li>
</ul>

<h3 id="지연-로딩">지연 로딩</h3>

<ul>
  <li>비지니스 로직 자체가 현 Entity만 사용하는 일이 많을 때(<strong>연관관계의 Entity를 같이 사용하는 일이 많이 없는 경우</strong>) 사용</li>
  <li><code class="language-plaintext highlighter-rouge">fetch = FetchType.LAZY</code></li>
  <li>
    <p>설정 및 원리</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Member Entity</span>
  <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
</code></pre></div>    </div>

    <p><img src="/images/posts/post-220818/Untitled 3.png" alt="Untitled" /></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">@ManyToOne(fetch = FetchType.LAZY)</code> : 해당 연관된 객체를 <strong>Proxy 객체로 조회한다</strong>는 뜻</li>
      <li>즉, Member Entity를 조회할 때, 해당 Team Entity를 부가적으로 가져오는 것이 아니라 <strong>Member Entity 만을 조회하고, Team Entity는 Proxy로 채워주는 것</strong></li>
      <li><strong>Team Entity는 Proxy 상태</strong>. → 접근(초기화)해야지만 실제 Entity를 가져와(DB에 query가 날라감) Proxy 객체의 Target에 연결해주게 됨 (ex_ <code class="language-plaintext highlighter-rouge">team.getName();</code>)</li>
    </ul>
  </li>
</ul>

<h3 id="즉시-로딩">즉시 로딩</h3>

<ul>
  <li>비지니스 로직 자체가 <strong>현 Entity와 연관관계의 Entity를 함께 사용하는 일이 많을 때</strong> 사용 (이런 상황에서 지연로딩을 사용하게 되면, 쓸데없이 query 2방이 나오는 것! → Member 조회 후 Team의 Proxy로 인해 또 Team을 조회하므로)</li>
  <li><code class="language-plaintext highlighter-rouge">fetch = FetchType.Eager</code> (<code class="language-plaintext highlighter-rouge">@ManyToOne</code>, <code class="language-plaintext highlighter-rouge">@OneToOne</code>의 fetch는 Default 가 Eager)</li>
  <li>
    <p>설정 및 원리</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Member Entity</span>
  <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">Eager</span><span class="o">)</span>
  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
</code></pre></div>    </div>

    <p><img src="/images/posts/post-220818/Untitled 4.png" alt="Untitled" /></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">@ManyToOne(fetch = FetchType.Eager)</code> : 해당 연관된 객체를 <strong>실제 Entity로 조회</strong>한다는 뜻 (<strong>JOIN</strong>을 통해 가져오게 됨)</li>
      <li>즉, Member Entity를 조회할 때, 해당 <strong>실제 Team Entity를 자동으로 가져오는 것</strong></li>
      <li>Team Entity는 실제 Entity 상태 <strong>(Not Proxy)</strong></li>
    </ul>
  </li>
  <li>즉시로딩과 프록시 주의 사항
    <ul>
      <li>즉시로딩은 사실 실무에서 사용하면 안됨! (<strong>실무에선 지연 로딩 권장</strong>)</li>
      <li>즉시 로딩은 <strong>예상치 못한 SQL이 추가적으로 발생</strong>할 수 있음 → 자동으로 연관된 Entity들을 DB에서 가져오기 때문에</li>
      <li>특히 <strong>JPQL에서 1+N 문제</strong>가 발생
        <ul>
          <li>예를 들어 JPQL로 Member List를 가져온다고 하면, 그 때 query는 1개가 나가게 됨. 하지만 즉시로딩으로 설정되어 있다고 하면 각 Member의 Team Entity까지 조회해오게 됨. 즉, 추가적으로 Member의 개수인 N만큼 query가 발생하는 것 → 네트워크측면에서의 성능이 굉장히 저하</li>
          <li>해결법 : <strong>모든 연관관계를 LAZY로 설정한 후 JPQL의 fetch join 으로 한방에 묶어서 조회</strong></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">@ManyToOne</code>, <code class="language-plaintext highlighter-rouge">@OneToOne</code>은 <strong>Defalut가 Eager</strong>. ( → <strong>Lazy로 변경</strong>해주어야 함)</li>
      <li><code class="language-plaintext highlighter-rouge">@OneToMany</code>, <code class="language-plaintext highlighter-rouge">@ManyToMany</code> 는 <strong>Defalut가 Lazy</strong> ( → 그대로 두면 됨)</li>
      <li>즉, 일단 <strong>모든 연관관계는 지연로딩으로 설정</strong>하고, 한번에 같이 사용해야 된다 하면 즉시로딩 대신 <strong>fetch join을 통해 한방에 묶어서 사용</strong>하면 됨</li>
    </ul>
  </li>
</ul>

<h2 id="영속성-전이와-고아-객체">영속성 전이와 고아 객체</h2>

<h3 id="영속성-전이--cascade">영속성 전이 : CASCADE</h3>

<ul>
  <li>연관관계를 매핑하는 것이나 즉시,지연 로딩과는 관계없는 개념</li>
  <li>두 객체간의 관계에서 <strong>자동으로 저장하거나 삭제하고 싶을 때 사용</strong>하는 개념</li>
  <li>즉, <strong>특정 엔티티를 영속 상태(persist)로 만들 때 이와 연관된 엔티티도 함께 영속 상태(persist)로 만들고 싶을 때</strong> 사용</li>
  <li>사용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">cascade=CascadeType.ALL</code></li>
      <li>
        <p>부모와 자식간의 관계에서 <strong>영속성 전이를 적용</strong>하고 싶은 상황</p>

        <p><img src="/images/posts/post-220818/Untitled 5.png" alt="Untitled" /></p>
      </li>
      <li>
        <p>Child Entity</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Child</span><span class="o">{</span>
  	<span class="o">...</span>
  	<span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
  	<span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"PARENT_ID"</span><span class="o">)</span>
  	<span class="kd">private</span> <span class="nc">Parent</span> <span class="n">parent</span><span class="o">;</span>
  	<span class="o">...</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>Parent Entity</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Entity</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parent</span><span class="o">{</span>
  	<span class="o">...</span>
  	<span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"parent"</span><span class="o">,</span> <span class="n">cascade</span><span class="o">=</span><span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">)</span>
  	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Child</span><span class="o">&gt;</span> <span class="n">childList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  	<span class="o">...</span>
  <span class="o">}</span>
</code></pre></div>        </div>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">@OneToMany(mappedBy = "parent", cascade=CascadeType.PERSIST)</code> : 해당 객체와의 관계에 있어서 <strong>Parent가 저장되면 알아서 연관된 Child들도 저장</strong>하겠다는 것</li>
          <li>즉, <code class="language-plaintext highlighter-rouge">em.persist(parent);</code> 해주면 <strong>자동으로 딸린 child 들에 대해서도 개수만큼</strong> <code class="language-plaintext highlighter-rouge">em.persist(child);</code> 를 해주는 것</li>
          <li><strong>삭제도 마찬가지</strong></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Cascade 주의!</strong>
    <ul>
      <li>영속성 전이는 <strong>연관관계를 매핑하는 것과 아무 관련이 없음</strong></li>
      <li>그저 엔티티를 영속화할 때 <strong>연관된 엔티티도 함께 영속화하는 편리함을 제공</strong>할 뿐</li>
      <li>보통 <code class="language-plaintext highlighter-rouge">cascade=CascadeType.ALL</code> 을 많이 사용함 → <strong>persist+remove 모두 가능</strong></li>
      <li>하지만, <strong>remove는 항상 조심</strong>해야 될 필요가 있음</li>
      <li>고로 비지니스 로직 상 <strong>무조건 함께 움직이는 관계</strong>다 → <strong>ALL</strong></li>
      <li>무조건 함께는 아니지만, <strong>저장시 함께 움직이는 관계</strong> → <strong>PERSIST</strong></li>
      <li><strong>REMOVE 도 적용되는 것은 항상 조심!!</strong></li>
      <li>Cascade는 <strong>소유자가 하나 일때만 사용</strong>하는 것! → <strong>공동 소유자일 경우에는 사용해서는 안됨</strong></li>
      <li>즉, <strong>정말 함께 움직이는 것들(라이프사이클이 동일한 놈들)에 대해서만 적용</strong>할 것!</li>
    </ul>
  </li>
</ul>

<h3 id="고아-객체-자동-제거--orphanremoval">고아 객체 자동 제거 : orphanRemoval</h3>

<ul>
  <li><strong>고아 객체 자동 제거</strong> : 부모 Entity와 <strong>연관관계가 끊어진 자식 엔티티를 자동으로 삭제</strong>하는 기능</li>
  <li><code class="language-plaintext highlighter-rouge">orphanRemoval = true</code></li>
  <li>
    <p>ex)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Parent Entity</span>
  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"parent"</span><span class="o">,</span> <span class="n">cascade</span><span class="o">=</span><span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orpahRemoval</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Child</span><span class="o">&gt;</span> <span class="n">childList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Parent</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Parent</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
  <span class="n">parent</span><span class="o">.</span><span class="na">getChilds</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</code></pre></div>    </div>

    <ul>
      <li>이와 같이 <strong>자식 Entity를 부모 Entity의 Collection에서 제거</strong>할 때 → <strong>관계가 끊어</strong>졌기 때문에 <strong>제거될 필요</strong>가 있음! → <strong>고아 객체 자동 제거</strong></li>
      <li><code class="language-plaintext highlighter-rouge">orphanRemoval = true</code> 설정으로 <strong>자동으로 DELETE query 가 나감</strong></li>
    </ul>
  </li>
  <li>주의할 점
    <ul>
      <li>참조가 <strong>제거된 Entity는 다른 곳에서 참조되지 않고 있어야 됨</strong></li>
      <li>즉, <strong>참조하는 곳이 하나일 때만 사용</strong>해야 함!! (삭제 되므로)
  ⇒ <strong>특정 Entity가 개인 소유할 때 사용</strong>해야 되는 것</li>
      <li><code class="language-plaintext highlighter-rouge">@OneToOne</code>, <code class="language-plaintext highlighter-rouge">@OneToMany</code> 에서만 사용 가능</li>
    </ul>

    <aside>
  ⚠️ <strong>고아객체 참고할 점</strong> <br />
  일반적으로 부모를 제거하면 자식은 당연히 고아 객체가 됨. 따라서 고아객체 제거 기능(<code>orphanRemoval = true</code>)을 활성화하면 부모를 제거할 때 자식도 함께 제거됨 → 마치 <code>CascadeType.REMOVE</code> 처럼 동작함
    
  </aside>
  </li>
</ul>

<h3 id="영속성-전이--고아-객체">영속성 전이 + 고아 객체</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CascadeType.ALL</code> + <code class="language-plaintext highlighter-rouge">orphanRemovel=true</code> ⇒ <code class="language-plaintext highlighter-rouge">@OneToMany(mappedBy = "parent", cascade=CascadeType.ALL, orpahRemoval = true)</code></li>
  <li><strong>생명주기</strong>에 따라 관리!</li>
  <li><strong>스스로 생명주기를 관리하는 엔티티</strong>는 <code class="language-plaintext highlighter-rouge">em.persist()</code>로 영속화,
<code class="language-plaintext highlighter-rouge">em.remove()</code>로 제거</li>
  <li>두 옵션을 모두 활성화 하면 <strong>부모 엔티티를 통해서 자식의 생명주기를 관리</strong>할 수 있음
    <ul>
      <li>즉, 자식의 저장, 삭제가 부모로 인해 관리되는 것</li>
      <li>자식의 저장(영속) → <code class="language-plaintext highlighter-rouge">parent.getChilds().add(child)</code></li>
      <li>자식의 삭제(제거) → <code class="language-plaintext highlighter-rouge">parent.getChilds().remove(0)</code></li>
      <li>즉, <strong>자식이 자기 의지대로 저장이나 삭제를 하지 않아도 알아서 영속되거나 제거됨</strong></li>
    </ul>
  </li>
  <li>도메인 주도 설계(DDD)의 Aggregate Root 개념을 구현할 때 유용</li>
</ul>
:ET